name: Version Tag and Release

on:
  push:
    branches:
      - main
    paths:
      - 'Cargo.toml'

jobs:
  tag-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current and previous versions
        id: versions
        run: |
          current_version=$(grep '^version = ' Cargo.toml | cut -d '"' -f2)
          echo "current_version=v${current_version}" >> $GITHUB_OUTPUT
          
          prev_version=$(git show HEAD^:Cargo.toml | grep '^version = ' | cut -d '"' -f2 || echo "0.0.0")
          echo "prev_version=v${prev_version}" >> $GITHUB_OUTPUT

      - name: Version comparison
        id: version_check
        run: |
          current="${{ steps.versions.outputs.current_version }}"
          previous="${{ steps.versions.outputs.prev_version }}"
          
          if [ "$current" = "$previous" ]; then
            echo "Version unchanged ($current), skipping tag creation"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Version changed from $previous to $current"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create tag and push
        if: steps.version_check.outputs.changed == 'true'
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

          # Check if there are changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected. Committing..."
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ steps.versions.outputs.current_version }}"
            git push origin main
          else
            echo "No changes to commit. Skipping commit."
          fi

          # Create and push the tag
          git tag -a ${{ steps.versions.outputs.current_version }} -m "Release ${{ steps.versions.outputs.current_version }}"
          git push origin ${{ steps.versions.outputs.current_version }}

  build-and-release:
    needs: tag-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: linux
            arch: amd64
          - target: aarch64-unknown-linux-gnu
            os: linux
            arch: arm64
          - target: aarch64-apple-darwin
            os: darwin
            arch: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install cross-compilation dependencies
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Package Binary
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../orbit-${{ matrix.os }}-${{ matrix.arch }}.tar.gz orbit
          cd ../../..

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: orbit-${{ matrix.os }}-${{ matrix.arch }}
          path: orbit-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

      - name: Create Release
        if: matrix.os == 'linux' && matrix.arch == 'amd64'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            orbit-linux-amd64/orbit-linux-amd64.tar.gz
            orbit-linux-arm64/orbit-linux-arm64.tar.gz
            orbit-darwin-arm64/orbit-darwin-arm64.tar.gz
