name: Version Tag

on:
  push:
    branches:
      - main
    paths:
      - 'Cargo.toml'

jobs:
  tag-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current and previous versions
        id: versions
        run: |
          # Get current version from Cargo.toml
          current_version=$(grep '^version = ' Cargo.toml | cut -d '"' -f2)
          echo "current_version=v${current_version}" >> $GITHUB_OUTPUT
          
          # Get the version from the last commit's Cargo.toml
          prev_version=$(git show HEAD^:Cargo.toml | grep '^version = ' | cut -d '"' -f2 || echo "0.0.0")
          echo "prev_version=v${prev_version}" >> $GITHUB_OUTPUT

      - name: Version comparison
        id: version_check
        run: |
          current="${{ steps.versions.outputs.current_version }}"
          previous="${{ steps.versions.outputs.prev_version }}"
          
          if [ "$current" = "$previous" ]; then
            echo "Version unchanged ($current), skipping tag creation"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Version changed from $previous to $current"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Check if tag exists
        id: check_tag
        if: steps.version_check.outputs.changed == 'true'
        run: |
          if git rev-parse "${{ steps.versions.outputs.current_version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install git-cliff
        if: steps.version_check.outputs.changed == 'true' && steps.check_tag.outputs.exists == 'false'
        uses: kenji-miyake/setup-git-cliff@v1

      - name: Generate changelog
        if: steps.version_check.outputs.changed == 'true' && steps.check_tag.outputs.exists == 'false'
        run: git cliff --tag ${{ steps.versions.outputs.current_version }} > CHANGELOG.md

      - name: Create tag and release
        if: steps.version_check.outputs.changed == 'true' && steps.check_tag.outputs.exists == 'false'
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add CHANGELOG.md
          git commit -m "docs: update changelog for ${{ steps.versions.outputs.current_version }}"
          git tag -a ${{ steps.versions.outputs.current_version }} -m "Release ${{ steps.versions.outputs.current_version }}"
          echo "Pushing changes to main"
          git push origin main
          echo "Pushing tag ${{ steps.versions.outputs.current_version }}"
          git push origin ${{ steps.versions.outputs.current_version }}
          echo "Tag push completed"

      - name: Trigger Release Workflow
        if: steps.version_check.outputs.changed == 'true' && steps.check_tag.outputs.exists == 'false'
        env:
          PUBLIC_WORKFLOWS: ${{ secrets.PUBLIC_WORKFLOWS }}
        run: |
          # Get the workflow ID for release.yml
          workflow_id=$(curl -s -H "Authorization: Bearer $PUBLIC_WORKFLOWS" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/workflows" | jq -r '.workflows[] | select(.name=="Release") | .id')

          # Trigger the workflow_dispatch event
          curl -X POST -H "Authorization: Bearer $PUBLIC_WORKFLOWS" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/workflows/$workflow_id/dispatches" \
            -d '{"ref": "main"}'